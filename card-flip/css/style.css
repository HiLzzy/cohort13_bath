/* Resets margin, padding, and sets box-sizing to border-box for all elements */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Styles for the body element */
body {
  min-height: 100vh; /* Sets a minimum height of 100% of the viewport height */
  background-image: radial-gradient(circle,#ffd300,#ef8d22,#c65035,#892137,#460329); /* Sets a radial gradient background */
  display: flex; /* Uses flexbox to center the content vertically and horizontally */
  justify-content: center;
  align-items: center;
}

/* Styles for the container element */
.container {
  width: 100%; /* Sets the width to 100% of its containing element */
  height: 100%; /* Sets the height to 100% of its containing element */
  perspective: 1400px; /* Sets the perspective for 3D transformations */
  display: grid; /* Uses grid layout for the container */
  grid-template-columns: repeat(4,250px); /* Creates a grid with 4 columns of 250px width each */
  justify-content: center; /* Centers the grid horizontally */
  gap: 50px; /* Sets the gap between grid items */
  padding: 100px 50px; /* Adds padding around the container */
}

/* Styles for the card element */
.card {
  height: 400px; /* Sets the height of the card */
  position: relative; /* Sets the position to relative for absolute positioning of children */
  transition: transform 0.7s; /* Adds a transition effect to the transform property */
  transform-style: preserve-3d; /* Specifies that child elements should preserve their 3D position */
  display: flex; /* Uses flexbox to center the content vertically and horizontally */
  align-items: center;
  justify-content: center;
}

/* Styles for the card image */
.card img {
  width: 250px; /* Sets the width of the card image */
  height: 400px; /* Sets the height of the card image */
}

/* Hover styles for specific card elements */
.card:nth-child(1):hover,
.card:nth-child(3):hover {
  cursor: pointer;
  transform: rotateY(180deg); /* Rotates the card around the Y-axis */
}

.card:nth-child(2):hover,
.card:nth-child(4):hover {
  cursor: pointer;
  transform: rotateX(-180deg); /* Rotates the card around the X-axis in the opposite direction */
}

/* Styles for the front and back faces of the card */
.front,.back {
  height: 100%; /* Sets the height of the front and back faces */
  width: 100%; /* Sets the width of the front and back faces */
  border-radius: 2rem; 
  box-shadow: 0 0 5px 2px rgba(50, 50, 50, 0.25);
  position: absolute; /* Positions the front and back faces absolutely within the card */
  /* backface-visibility: hidden; Hides the backface of the element */
  overflow: hidden; 
}

/* Styles for the back face of the card */
.back {
  transform: rotateY(180deg); /* Rotates the back face of the card around the Y-axis */
}

/* Media query for screen widths up to 1200px */
@media screen and (max-width: 1200px) {
  .container {
    grid-template-columns: repeat(3,250px); /* Changes the grid template to have 3 columns */
  }
}

/* Media query for screen widths up to 768px */
@media screen and (max-width: 768px) {
  .container {
    grid-template-columns: repeat(2,250px); /* Changes the grid template to have 2 columns */
  }
}

/* Media query for screen widths up to 650px */
@media screen and (max-width: 650px) {
  .container {
    grid-template-columns: repeat(1,250px); /* Changes the grid template to have 1 column */
  }
}
